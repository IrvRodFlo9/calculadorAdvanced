{"version":3,"sources":["debugExpression.js"],"names":["changesExpression","checkParenthesis","expression","includes","rightParenthesis","leftParenthesis","char","diff","repeat","debugExpression","screen","newExpression","lScreen","innerHTML","change","replace","ans"],"mappings":"OAASA,sBAAyB,YAElC,MAAMC,iBAAoBC,IACxB,IAAKA,EAAWC,SAAS,KAAM,OAAOD,EAEtC,IAAIE,EAAmB,EACnBC,EAAkB,EACtB,IAAK,IAAIC,KAAQJ,EACN,MAATI,EAAeF,IAA8B,MAATE,GAAgBD,IAMtD,MAAME,EAAOF,EAAkBD,EAE/B,OAAIG,EAAO,EACFL,EAAa,IAAIM,OAAOD,QADjC,GAKIE,gBAAmBC,IACvB,IAAIC,EAAgBD,EAAOE,QAAQC,UAEnC,IAAK,IAAIC,KAAUd,kBACjBW,EAAcR,SAASW,KACpBH,EAAgBA,EAAcI,QAC7BD,EACAd,kBAAkBc,KASxB,OALAH,EAAgBV,iBAAiBU,GAEjCA,EAAcR,SAAS,SACpBQ,EAAgBA,EAAcI,QAAQ,MAAOL,EAAOM,MAEhDL,kBAGMF","file":"debugExpression.js","sourcesContent":["import { changesExpression } from \"./data.js\";\r\n\r\nconst checkParenthesis = (expression) => {\r\n  if (!expression.includes(\"(\")) return expression;\r\n\r\n  let rightParenthesis = 0;\r\n  let leftParenthesis = 0;\r\n  for (let char of expression) {\r\n    char === \")\" ? rightParenthesis++ : char === \"(\" && leftParenthesis++;\r\n    /*     Forma anterior\r\n    char === \")\" && rightParenthesis++;\r\n    char === \"(\" && leftParenthesis++;\r\n    */\r\n  }\r\n  const diff = leftParenthesis - rightParenthesis;\r\n\r\n  if (diff > 0) {\r\n    return expression + \")\".repeat(diff);\r\n  }\r\n};\r\n\r\nconst debugExpression = (screen) => {\r\n  let newExpression = screen.lScreen.innerHTML;\r\n\r\n  for (let change in changesExpression) {\r\n    newExpression.includes(change) &&\r\n      (newExpression = newExpression.replace(\r\n        change,\r\n        changesExpression[change]\r\n      ));\r\n  }\r\n\r\n  newExpression = checkParenthesis(newExpression);\r\n\r\n  newExpression.includes(\"Ans\") &&\r\n    (newExpression = newExpression.replace(\"Ans\", screen.ans));\r\n\r\n  return newExpression;\r\n};\r\n\r\nexport default debugExpression;\r\n"]}