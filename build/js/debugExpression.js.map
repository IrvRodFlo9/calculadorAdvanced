{"version":3,"sources":["debugExpression.js"],"names":["changesExpression","checkParenthesis","expression","newExpression","includes","rightParenthesis","leftParenthesis","char","debugExpression","screen","lScreen","innerHTML","change","replace","ans"],"mappings":"OAASA,sBAAyB,YAElC,MAAMC,iBAAoBC,IACxB,IAAIC,EAAgBD,EAEpB,IAAKC,EAAcC,SAAS,KAAM,OAAOD,EAEzC,IAAIE,EAAmB,EACnBC,EAAkB,EACtB,IAAK,IAAIC,KAAQJ,EACN,MAATI,EAAeF,IAA8B,MAATE,GAAgBD,IAQtD,OAFAA,EAAkBD,IAAqBF,GAAiB,KAEjDA,GAGHK,gBAAmBC,IACvB,IAAIN,EAAgBM,EAAOC,QAAQC,UACnC,IAAK,IAAIC,KAAUZ,kBACjBG,EAAcC,SAASQ,KACpBT,EAAgBA,EAAcU,QAC7BD,EACAZ,kBAAkBY,KAQxB,OAJAT,EAAgBF,iBAAiBE,GAEjCA,EAAcC,SAAS,SACpBD,EAAgBA,EAAcU,QAAQ,MAAOJ,EAAOK,MAChDX,kBAGMK","file":"debugExpression.js","sourcesContent":["import { changesExpression } from \"./data.js\";\r\n\r\nconst checkParenthesis = (expression) => {\r\n  let newExpression = expression;\r\n\r\n  if (!newExpression.includes(\"(\")) return newExpression;\r\n\r\n  let rightParenthesis = 0;\r\n  let leftParenthesis = 0;\r\n  for (let char of newExpression) {\r\n    char === \")\" ? rightParenthesis++ : char === \"(\" && leftParenthesis++;\r\n    /*     Forma anterior\r\n    char === \")\" && rightParenthesis++;\r\n    char === \"(\" && leftParenthesis++;\r\n    */\r\n  }\r\n  leftParenthesis > rightParenthesis && (newExpression += \")\");\r\n\r\n  return newExpression;\r\n};\r\n\r\nconst debugExpression = (screen) => {\r\n  let newExpression = screen.lScreen.innerHTML;\r\n  for (let change in changesExpression) {\r\n    newExpression.includes(change) &&\r\n      (newExpression = newExpression.replace(\r\n        change,\r\n        changesExpression[change]\r\n      ));\r\n  }\r\n\r\n  newExpression = checkParenthesis(newExpression);\r\n\r\n  newExpression.includes(\"Ans\") &&\r\n    (newExpression = newExpression.replace(\"Ans\", screen.ans));\r\n  return newExpression;\r\n};\r\n\r\nexport default debugExpression;\r\n"]}